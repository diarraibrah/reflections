How did viewing a diff between two versions of a file help you see the bug that
was introduced?

    Viewing a diff between the two versions displayed the differences, thus making
    the review/search much easier than a manual/visual comparison.

How could having easy access to the entire history of a file make you a more
efficient programmer in the long term?

    Access to entire history of a file can help pinpoint where in the code a bug may 
	have been introduced, or what changes were made.

What do you think are the pros and cons of manually choosing when to create a
commit, like you do in Git, vs having versions automatically saved, like Google
docs does?

    Pros: manual commits result in fewer number of commit history vs auto commits
	that may occurs by time slots. Auto commit creates too many entries in file history which 
	may be difficult to review.
	Cons: in the event of system crash, lost of data may occur with manual commits
	where as auto commits may have taken snapshots with most recent restore points.

Why do you think some version control systems, like Git, allow saving multiple
files in one commit, while others, like Google Docs, treat each file separately?

    Saving multiple files in one commit may be helpful when working on large projects.

How can you use the commands git log and git diff to view the history of files?

    By issuing the commands 'Git log' and 'Git diff'

How might using version control make you more confident to make changes that
could break something?

    Ability to review history of changes and Ability to restore previous versions of files.

Now that you have your workspace set up, what do you want to try using Git for?

    Create projects, create files, push files in to repo, create branchs etc..